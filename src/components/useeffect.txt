useEffect(async () => {
    const adminToken = localStorage.getItem("admin");
    // console.log(adminToken)
    const token = JSON.parse(adminToken)?.tokens?.accessToken;
    const url = process.env.REACT_APP_URL
    const renewToken = JSON.parse(adminToken)?.tokens?.refreshToken;
    setOpenNew(true);

    if (isJwtExpired(renewToken) === false) {
      console.log('isExpired is:', isJwtExpired(token));

      if (isJwtExpired(token) === true) {
        const params = JSON.stringify({
          'refreshToken': renewToken,

        });
        try {
          const renewapi = `http://${url}/admin/renewAccessToken`
          await axios.post(renewapi, {
            'refreshToken': renewToken
          }, {
            headers: {
              Authorization: `Bearer ${token}`,
            }
          })

            .then(async response => {
              // console.log(response)
              // console.log(token)
              // console.log(JSON.parse(adminToken))
              let newToken = JSON.parse(adminToken)
              newToken.tokens.accessToken = response.data.NewAccessToken
              console.log(newToken)
              localStorage.setItem("admin", JSON.stringify(newToken))
              // const token = JSON.parse(adminToken)?.tokens?.accessToken;
              // localStorage.setItem("admin", adminToken)
              try {
                const api = `http://${url}/admin/orders`
                await axios.get(api, {
                  headers: {
                    Authorization: `Bearer ${token}`,
                  }
                })
                  // .then(response => response.json())
                  .then(json =>
                    setRow(json.data),
                    setOpenNew(false))

                  .catch(err => {
                    console.log(err)
                    setNo(1)
                  });
              }
              catch (err) {
                console.log(err)
              }
            }
            )
            // console.log()

            .catch(err => {
              console.log(err)
              setNo(1)
            });
        }
        catch (err) {
          console.log(err)
        }



      }
      else {
        try {
          const api = `http://${url}/admin/orders`
          await axios.get(api, {
            headers: {
              Authorization: `Bearer ${token}`,
            }
          })
            // .then(response => response.json())
            .then(json =>
              setRow(json.data),
              setOpenNew(false))

            .catch(err => {
              console.log(err)
              setNo(1)
            });
        }
        catch (err) {
          console.log(err)
        }
      }
    }

    else {
      setToken("")
      localStorage.clear();
      console.log('isExpired is:', isJwtExpired(token));
      alert("Session Time Out")
    }
  }, []);